// Generated by CoffeeScript 1.3.3
(function() {
  var AbstractAppender, RollingFileAppender, fs, getLogTimeStamp, path, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  path = require('path');

  util = require('util');

  AbstractAppender = require("./abstract_appender").AbstractAppender;

  require('../lib/date.js');

  RollingFileAppender = (function(_super) {

    __extends(RollingFileAppender, _super);

    function RollingFileAppender(params) {
      this.root = path.normalize(params.root);
      this.logFilePattern = params.logFilePattern;
      this.datePattern = params.datePattern;
      this.interval = params.interval * 1000;
      this.logFD = null;
      this.expectTime = 0;
      return;
    }

    RollingFileAppender.prototype.append = function(loggerName, level, msg) {
      var sb;
      this.openExpectLogFile();
      if (util.isArray(msg)) {
        msg = msg.join(',') + '\n';
      }
      sb = new Buffer(msg);
      fs.write(this.logFD, sb, 0, sb.length, null, function(err) {
        if (err != null) {
          throw err;
        }
      });
    };

    return RollingFileAppender;

  })(AbstractAppender);

  RollingFileAppender.prototype.openExpectLogFile = function() {
    var curTime;
    curTime = getLogTimeStamp(this.interval);
    if (curTime !== this.expectTime) {
      this.expectTime = curTime;
      if (!this.logFD) {
        this.rotateLogFileSync(curTime);
      } else {
        this.rotateLogFile(curTime);
      }
    }
  };

  RollingFileAppender.prototype.rotateLogFileSync = function(time) {
    var logDir, logFile;
    logFile = this.getLogFilename(time);
    logDir = this.getLogDir(time);
    if (!fs.existsSync(logDir)) {
      try {
        fs.mkdirSync(logDir, '775');
      } catch (err) {
        if (err.code !== "EEXIST") {
          throw err;
        }
      }
    }
    try {
      if (this.logFD) {
        fs.closeSync(this.logFD);
      }
      this.logFD = fs.openSync(logFile, 'a', '664');
    } catch (err) {
      throw err;
    }
  };

  RollingFileAppender.prototype.rotateLogFile = function(time) {
    var logDir, logFile;
    logFile = this.getLogFilename(time);
    logDir = this.getLogDir(time);
    if (!fs.existsSync(logDir)) {
      try {
        fs.mkdirSync(logDir, '775');
      } catch (err) {
        if (err.code !== "EEXIST") {
          throw err;
        }
      }
    }
    this.openLogFile(logFile);
  };

  RollingFileAppender.prototype.openLogFile = function(logFile) {
    var self;
    self = this;
    fs.open(logFile, 'a', '664', function(err, fd) {
      var tmpFD;
      if (err != null) {
        throw err;
      }
      tmpFD = self.logFD;
      self.logFD = fd;
      if (tmpFD != null) {
        return fs.close(tmpFD, function(err) {
          if (err != null) {
            throw err;
          }
        });
      }
    });
  };

  RollingFileAppender.prototype.getLogDir = function(time) {
    var logTime;
    logTime = time != null ? new Date(time) : new Date();
    return path.join(this.root, logTime.format('yyyyMMdd'));
  };

  RollingFileAppender.prototype.getLogFilename = function(time) {
    var dayString, logTime;
    logTime = time != null ? new Date(time) : new Date();
    dayString = logTime.format("yyyyMMdd");
    return path.join(this.root, dayString, util.format(this.logFilePattern, logTime.format(this.datePattern)));
  };

  exports.getLogTimeStamp = getLogTimeStamp = function(interval, time) {
    var localTime, theTime;
    theTime = time != null ? time : new Date();
    localTime = theTime.getTime();
    localTime -= theTime.getTimezoneOffset() * 60 * 1000;
    localTime = parseInt(localTime / interval) * interval;
    localTime += theTime.getTimezoneOffset() * 60 * 1000;
    return localTime;
  };

  exports.RollingFileAppender = RollingFileAppender;

}).call(this);
