// Generated by CoffeeScript 1.3.3
(function() {
  var AppenderFactory, LevelAble, LevelUtil, Logger, Module,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  LevelAble = require('./core/level').LevelAble;

  LevelUtil = require('./core/level').LevelUtil;

  Module = require('./core/module').Module;

  AppenderFactory = require('./appender/appender_factory');

  Logger = (function(_super) {

    __extends(Logger, _super);

    Logger.include(LevelAble);

    function Logger(root, conf, fullConf) {
      var appenderObj, name, _i, _len, _ref;
      this._appenderList = [];
      this._name = "";
      this._disable = false;
      this._level = LevelUtil.DEFAULT_LEVEL;
      if (conf.name) {
        this._name = conf.name;
      }
      if (conf.disable === true) {
        this._disable = true;
      }
      this._setLevel(conf, fullConf);
      _ref = conf.appenderRefs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        appenderObj = AppenderFactory.getAppender(root, this._name, name, fullConf);
        if (appenderObj) {
          this._appenderList.push(appenderObj);
        }
      }
      return;
    }

    Logger.prototype._log = function(level, msg) {
      var appender, _i, _len, _ref;
      if (this._disable) {
        return;
      }
      if (LevelUtil.isLevelAllowed(this._level, level)) {
        _ref = this._appenderList;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          appender = _ref[_i];
          appender.append(this._name, level, msg);
        }
      }
    };

    Logger.prototype.isDebugEnable = function() {
      if (this._disable) {
        return false;
      }
      if (LevelUtil.isLevelAllowed(this._level, LevelUtil.DEBUG_LEVEL)) {
        return true;
      }
      return false;
    };

    Logger.prototype._setLevel = function(loggerConf, fullConf) {
      var loggerLevel, rootLevel;
      loggerLevel = loggerConf.level;
      rootLevel = fullConf.level;
      if (loggerLevel != null) {
        if (LevelUtil.validate(loggerLevel)) {
          return this._level = loggerLevel;
        } else {
          throw new Error(("logger name: " + loggerConf.name + " init error cause by unknown logger level:") + loggerLevel);
        }
      } else if (rootLevel != null) {
        if (LevelUtil.validate(rootLevel)) {
          return this._level = rootLevel;
        } else {
          throw new Error(("logger name: " + loggerConf.name + " init error cause by unknown root level:") + rootLevel);
        }
      }
    };

    return Logger;

  })(Module);

  exports.Logger = Logger;

}).call(this);
